// Generated by gencpp from file atom_esp_listener/alldata.msg
// DO NOT EDIT!


#ifndef ATOM_ESP_LISTENER_MESSAGE_ALLDATA_H
#define ATOM_ESP_LISTENER_MESSAGE_ALLDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <atom_esp_listener/mpudata.h>
#include <atom_esp_listener/PID_Tune_Params.h>
#include <atom_esp_listener/PID_Tune_Params.h>
#include <atom_esp_listener/PID_Tune_Params.h>
#include <atom_esp_listener/Profiler_data.h>
#include <atom_esp_listener/Profiler_data.h>
#include <atom_esp_listener/Profiler_data.h>
#include <atom_esp_listener/Profiler_data.h>

namespace atom_esp_listener
{
template <class ContainerAllocator>
struct alldata_
{
  typedef alldata_<ContainerAllocator> Type;

  alldata_()
    : header()
    , mpuRAW()
    , pingheight(0.0)
    , ppfb()
    , pplr()
    , ppud()
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , timestamp(0)
    , tune_type(0)
    , profiled_loop()
    , profiled_mpu()
    , profiled_wifi()
    , profiled_steer()  {
    }
  alldata_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mpuRAW(_alloc)
    , pingheight(0.0)
    , ppfb(_alloc)
    , pplr(_alloc)
    , ppud(_alloc)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , timestamp(0)
    , tune_type(0)
    , profiled_loop(_alloc)
    , profiled_mpu(_alloc)
    , profiled_wifi(_alloc)
    , profiled_steer(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::atom_esp_listener::mpudata_<ContainerAllocator>  _mpuRAW_type;
  _mpuRAW_type mpuRAW;

   typedef float _pingheight_type;
  _pingheight_type pingheight;

   typedef  ::atom_esp_listener::PID_Tune_Params_<ContainerAllocator>  _ppfb_type;
  _ppfb_type ppfb;

   typedef  ::atom_esp_listener::PID_Tune_Params_<ContainerAllocator>  _pplr_type;
  _pplr_type pplr;

   typedef  ::atom_esp_listener::PID_Tune_Params_<ContainerAllocator>  _ppud_type;
  _ppud_type ppud;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint16_t _tune_type_type;
  _tune_type_type tune_type;

   typedef  ::atom_esp_listener::Profiler_data_<ContainerAllocator>  _profiled_loop_type;
  _profiled_loop_type profiled_loop;

   typedef  ::atom_esp_listener::Profiler_data_<ContainerAllocator>  _profiled_mpu_type;
  _profiled_mpu_type profiled_mpu;

   typedef  ::atom_esp_listener::Profiler_data_<ContainerAllocator>  _profiled_wifi_type;
  _profiled_wifi_type profiled_wifi;

   typedef  ::atom_esp_listener::Profiler_data_<ContainerAllocator>  _profiled_steer_type;
  _profiled_steer_type profiled_steer;




  typedef boost::shared_ptr< ::atom_esp_listener::alldata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atom_esp_listener::alldata_<ContainerAllocator> const> ConstPtr;

}; // struct alldata_

typedef ::atom_esp_listener::alldata_<std::allocator<void> > alldata;

typedef boost::shared_ptr< ::atom_esp_listener::alldata > alldataPtr;
typedef boost::shared_ptr< ::atom_esp_listener::alldata const> alldataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atom_esp_listener::alldata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atom_esp_listener::alldata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atom_esp_listener

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'atom_esp_listener': ['/home/rahuldeo/ATOM/ATOM_DRONE/ros/rosatom/src/atom_esp_listener/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atom_esp_listener::alldata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atom_esp_listener::alldata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atom_esp_listener::alldata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atom_esp_listener::alldata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atom_esp_listener::alldata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atom_esp_listener::alldata_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atom_esp_listener::alldata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f657d5dee01c22ca305fb4d2b9139bc";
  }

  static const char* value(const ::atom_esp_listener::alldata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f657d5dee01c22cULL;
  static const uint64_t static_value2 = 0xa305fb4d2b9139bcULL;
};

template<class ContainerAllocator>
struct DataType< ::atom_esp_listener::alldata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atom_esp_listener/alldata";
  }

  static const char* value(const ::atom_esp_listener::alldata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atom_esp_listener::alldata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
#int16  mpuData_AcX\n\
#int16  mpuData_AcY\n\
#int16  mpuData_AcZ\n\
#uint32  mpuData_timestamp\n\
#int16  mpuData_Tmp\n\
#int16  mpuData_GyX\n\
#int16  mpuData_GyY\n\
#int16  mpuData_GyZ\n\
\n\
mpudata mpuRAW\n\
#int16  mpuRAW_AcX\n\
#int16  mpuRAW_AcY\n\
#int16  mpuRAW_AcZ\n\
#uint32  mpuRAW_timestamp\n\
#int16  mpuRAW_Tmp\n\
#int16  mpuRAW_GyX\n\
#int16  mpuRAW_GyY\n\
#int16  mpuRAW_GyZ\n\
\n\
float32  pingheight\n\
\n\
PID_Tune_Params ppfb\n\
#uint32  ppfb_timestamp\n\
#float64  ppfb_Input\n\
#float64  ppfb_Kd\n\
#float64  ppfb_Ki\n\
#float64  ppfb_Kp\n\
#float64  ppfb_Output\n\
#float64  ppfb_Setpoint\n\
\n\
PID_Tune_Params pplr\n\
#uint32  pplr_timestamp\n\
#float64  pplr_Input\n\
#float64  pplr_Kd\n\
#float64  pplr_Ki\n\
#float64  pplr_Kp\n\
#float64  pplr_Output\n\
#float64  pplr_Setpoint\n\
\n\
PID_Tune_Params ppud\n\
#uint32  ppud_timestamp\n\
#float64  ppud_Input\n\
#float64  ppud_Kd\n\
#float64  ppud_Ki\n\
#float64  ppud_Kp\n\
#float64  ppud_Output\n\
#float64  ppud_Setpoint\n\
\n\
float32  yaw\n\
float32  pitch\n\
float32  roll\n\
\n\
uint32  timestamp\n\
uint16  tune_type\n\
\n\
Profiler_data profiled_loop\n\
Profiler_data profiled_mpu\n\
Profiler_data profiled_wifi\n\
Profiler_data profiled_steer\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: atom_esp_listener/mpudata\n\
Header header\n\
uint32 timestamp\n\
int16  AcX\n\
int16  AcY\n\
int16  AcZ\n\
int16  Tmp\n\
int16  GyX\n\
int16  GyY\n\
int16  GyZ\n\
\n\
================================================================================\n\
MSG: atom_esp_listener/PID_Tune_Params\n\
Header header\n\
uint32  timestamp\n\
float64 Setpoint\n\
float64 Input\n\
float64 Output\n\
float64 Kd\n\
float64 Ki\n\
float64 Kp\n\
\n\
================================================================================\n\
MSG: atom_esp_listener/Profiler_data\n\
Header  header\n\
uint32  timestamp\n\
uint16  averageIterationCount\n\
float32 averageTime # micros\n\
float32 averageTime2 # micros\n\
uint32  averageTick\n\
";
  }

  static const char* value(const ::atom_esp_listener::alldata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atom_esp_listener::alldata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mpuRAW);
      stream.next(m.pingheight);
      stream.next(m.ppfb);
      stream.next(m.pplr);
      stream.next(m.ppud);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.timestamp);
      stream.next(m.tune_type);
      stream.next(m.profiled_loop);
      stream.next(m.profiled_mpu);
      stream.next(m.profiled_wifi);
      stream.next(m.profiled_steer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct alldata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atom_esp_listener::alldata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atom_esp_listener::alldata_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mpuRAW: ";
    s << std::endl;
    Printer< ::atom_esp_listener::mpudata_<ContainerAllocator> >::stream(s, indent + "  ", v.mpuRAW);
    s << indent << "pingheight: ";
    Printer<float>::stream(s, indent + "  ", v.pingheight);
    s << indent << "ppfb: ";
    s << std::endl;
    Printer< ::atom_esp_listener::PID_Tune_Params_<ContainerAllocator> >::stream(s, indent + "  ", v.ppfb);
    s << indent << "pplr: ";
    s << std::endl;
    Printer< ::atom_esp_listener::PID_Tune_Params_<ContainerAllocator> >::stream(s, indent + "  ", v.pplr);
    s << indent << "ppud: ";
    s << std::endl;
    Printer< ::atom_esp_listener::PID_Tune_Params_<ContainerAllocator> >::stream(s, indent + "  ", v.ppud);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "tune_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.tune_type);
    s << indent << "profiled_loop: ";
    s << std::endl;
    Printer< ::atom_esp_listener::Profiler_data_<ContainerAllocator> >::stream(s, indent + "  ", v.profiled_loop);
    s << indent << "profiled_mpu: ";
    s << std::endl;
    Printer< ::atom_esp_listener::Profiler_data_<ContainerAllocator> >::stream(s, indent + "  ", v.profiled_mpu);
    s << indent << "profiled_wifi: ";
    s << std::endl;
    Printer< ::atom_esp_listener::Profiler_data_<ContainerAllocator> >::stream(s, indent + "  ", v.profiled_wifi);
    s << indent << "profiled_steer: ";
    s << std::endl;
    Printer< ::atom_esp_listener::Profiler_data_<ContainerAllocator> >::stream(s, indent + "  ", v.profiled_steer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATOM_ESP_LISTENER_MESSAGE_ALLDATA_H
