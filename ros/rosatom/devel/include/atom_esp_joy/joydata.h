// Generated by gencpp from file atom_esp_joy/joydata.msg
// DO NOT EDIT!


#ifndef ATOM_ESP_JOY_MESSAGE_JOYDATA_H
#define ATOM_ESP_JOY_MESSAGE_JOYDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace atom_esp_joy
{
template <class ContainerAllocator>
struct joydata_
{
  typedef joydata_<ContainerAllocator> Type;

  joydata_()
    : header()
    , X(0)
    , Y(0)
    , Z(0)
    , S(0)
    , buttons(0)  {
    }
  joydata_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , X(0)
    , Y(0)
    , Z(0)
    , S(0)
    , buttons(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _X_type;
  _X_type X;

   typedef int16_t _Y_type;
  _Y_type Y;

   typedef int16_t _Z_type;
  _Z_type Z;

   typedef int16_t _S_type;
  _S_type S;

   typedef uint16_t _buttons_type;
  _buttons_type buttons;




  typedef boost::shared_ptr< ::atom_esp_joy::joydata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atom_esp_joy::joydata_<ContainerAllocator> const> ConstPtr;

}; // struct joydata_

typedef ::atom_esp_joy::joydata_<std::allocator<void> > joydata;

typedef boost::shared_ptr< ::atom_esp_joy::joydata > joydataPtr;
typedef boost::shared_ptr< ::atom_esp_joy::joydata const> joydataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atom_esp_joy::joydata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atom_esp_joy::joydata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace atom_esp_joy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'atom_esp_joy': ['/home/rahuldeo/ATOM/ATOM_DRONE/ros/rosatom/src/atom_esp_joy/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::atom_esp_joy::joydata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atom_esp_joy::joydata_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atom_esp_joy::joydata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atom_esp_joy::joydata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atom_esp_joy::joydata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atom_esp_joy::joydata_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atom_esp_joy::joydata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8d766a6e235fd7ad875a4a557990e38";
  }

  static const char* value(const ::atom_esp_joy::joydata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8d766a6e235fd7aULL;
  static const uint64_t static_value2 = 0xd875a4a557990e38ULL;
};

template<class ContainerAllocator>
struct DataType< ::atom_esp_joy::joydata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atom_esp_joy/joydata";
  }

  static const char* value(const ::atom_esp_joy::joydata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atom_esp_joy::joydata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int16 X\n\
int16 Y\n\
int16 Z\n\
int16 S\n\
uint16 buttons # MSB F1,B2,3,4,5,6,7,8,9,10,11,12,H1,2,3,4 LSB\n\
# 0000 0\n\
# 0001 1\n\
# 0010 2\n\
# 0011 3\n\
# 0100 4\n\
# 0101 5\n\
# 0110 6\n\
# 0111 7\n\
# 1000 8\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::atom_esp_joy::joydata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atom_esp_joy::joydata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.Z);
      stream.next(m.S);
      stream.next(m.buttons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joydata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atom_esp_joy::joydata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atom_esp_joy::joydata_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Y);
    s << indent << "Z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Z);
    s << indent << "S: ";
    Printer<int16_t>::stream(s, indent + "  ", v.S);
    s << indent << "buttons: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.buttons);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATOM_ESP_JOY_MESSAGE_JOYDATA_H
