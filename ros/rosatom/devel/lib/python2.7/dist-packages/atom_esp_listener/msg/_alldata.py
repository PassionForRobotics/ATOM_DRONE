# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from atom_esp_listener/alldata.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import atom_esp_listener.msg
import std_msgs.msg

class alldata(genpy.Message):
  _md5sum = "9f657d5dee01c22ca305fb4d2b9139bc"
  _type = "atom_esp_listener/alldata"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
#int16  mpuData_AcX
#int16  mpuData_AcY
#int16  mpuData_AcZ
#uint32  mpuData_timestamp
#int16  mpuData_Tmp
#int16  mpuData_GyX
#int16  mpuData_GyY
#int16  mpuData_GyZ

mpudata mpuRAW
#int16  mpuRAW_AcX
#int16  mpuRAW_AcY
#int16  mpuRAW_AcZ
#uint32  mpuRAW_timestamp
#int16  mpuRAW_Tmp
#int16  mpuRAW_GyX
#int16  mpuRAW_GyY
#int16  mpuRAW_GyZ

float32  pingheight

PID_Tune_Params ppfb
#uint32  ppfb_timestamp
#float64  ppfb_Input
#float64  ppfb_Kd
#float64  ppfb_Ki
#float64  ppfb_Kp
#float64  ppfb_Output
#float64  ppfb_Setpoint

PID_Tune_Params pplr
#uint32  pplr_timestamp
#float64  pplr_Input
#float64  pplr_Kd
#float64  pplr_Ki
#float64  pplr_Kp
#float64  pplr_Output
#float64  pplr_Setpoint

PID_Tune_Params ppud
#uint32  ppud_timestamp
#float64  ppud_Input
#float64  ppud_Kd
#float64  ppud_Ki
#float64  ppud_Kp
#float64  ppud_Output
#float64  ppud_Setpoint

float32  yaw
float32  pitch
float32  roll

uint32  timestamp
uint16  tune_type

Profiler_data profiled_loop
Profiler_data profiled_mpu
Profiler_data profiled_wifi
Profiler_data profiled_steer



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: atom_esp_listener/mpudata
Header header
uint32 timestamp
int16  AcX
int16  AcY
int16  AcZ
int16  Tmp
int16  GyX
int16  GyY
int16  GyZ

================================================================================
MSG: atom_esp_listener/PID_Tune_Params
Header header
uint32  timestamp
float64 Setpoint
float64 Input
float64 Output
float64 Kd
float64 Ki
float64 Kp

================================================================================
MSG: atom_esp_listener/Profiler_data
Header  header
uint32  timestamp
uint16  averageIterationCount
float32 averageTime # micros
float32 averageTime2 # micros
uint32  averageTick
"""
  __slots__ = ['header','mpuRAW','pingheight','ppfb','pplr','ppud','yaw','pitch','roll','timestamp','tune_type','profiled_loop','profiled_mpu','profiled_wifi','profiled_steer']
  _slot_types = ['std_msgs/Header','atom_esp_listener/mpudata','float32','atom_esp_listener/PID_Tune_Params','atom_esp_listener/PID_Tune_Params','atom_esp_listener/PID_Tune_Params','float32','float32','float32','uint32','uint16','atom_esp_listener/Profiler_data','atom_esp_listener/Profiler_data','atom_esp_listener/Profiler_data','atom_esp_listener/Profiler_data']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mpuRAW,pingheight,ppfb,pplr,ppud,yaw,pitch,roll,timestamp,tune_type,profiled_loop,profiled_mpu,profiled_wifi,profiled_steer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(alldata, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mpuRAW is None:
        self.mpuRAW = atom_esp_listener.msg.mpudata()
      if self.pingheight is None:
        self.pingheight = 0.
      if self.ppfb is None:
        self.ppfb = atom_esp_listener.msg.PID_Tune_Params()
      if self.pplr is None:
        self.pplr = atom_esp_listener.msg.PID_Tune_Params()
      if self.ppud is None:
        self.ppud = atom_esp_listener.msg.PID_Tune_Params()
      if self.yaw is None:
        self.yaw = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.timestamp is None:
        self.timestamp = 0
      if self.tune_type is None:
        self.tune_type = 0
      if self.profiled_loop is None:
        self.profiled_loop = atom_esp_listener.msg.Profiler_data()
      if self.profiled_mpu is None:
        self.profiled_mpu = atom_esp_listener.msg.Profiler_data()
      if self.profiled_wifi is None:
        self.profiled_wifi = atom_esp_listener.msg.Profiler_data()
      if self.profiled_steer is None:
        self.profiled_steer = atom_esp_listener.msg.Profiler_data()
    else:
      self.header = std_msgs.msg.Header()
      self.mpuRAW = atom_esp_listener.msg.mpudata()
      self.pingheight = 0.
      self.ppfb = atom_esp_listener.msg.PID_Tune_Params()
      self.pplr = atom_esp_listener.msg.PID_Tune_Params()
      self.ppud = atom_esp_listener.msg.PID_Tune_Params()
      self.yaw = 0.
      self.pitch = 0.
      self.roll = 0.
      self.timestamp = 0
      self.tune_type = 0
      self.profiled_loop = atom_esp_listener.msg.Profiler_data()
      self.profiled_mpu = atom_esp_listener.msg.Profiler_data()
      self.profiled_wifi = atom_esp_listener.msg.Profiler_data()
      self.profiled_steer = atom_esp_listener.msg.Profiler_data()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.mpuRAW.header.seq, _x.mpuRAW.header.stamp.secs, _x.mpuRAW.header.stamp.nsecs))
      _x = self.mpuRAW.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I7hf3I().pack(_x.mpuRAW.timestamp, _x.mpuRAW.AcX, _x.mpuRAW.AcY, _x.mpuRAW.AcZ, _x.mpuRAW.Tmp, _x.mpuRAW.GyX, _x.mpuRAW.GyY, _x.mpuRAW.GyZ, _x.pingheight, _x.ppfb.header.seq, _x.ppfb.header.stamp.secs, _x.ppfb.header.stamp.nsecs))
      _x = self.ppfb.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I6d3I().pack(_x.ppfb.timestamp, _x.ppfb.Setpoint, _x.ppfb.Input, _x.ppfb.Output, _x.ppfb.Kd, _x.ppfb.Ki, _x.ppfb.Kp, _x.pplr.header.seq, _x.pplr.header.stamp.secs, _x.pplr.header.stamp.nsecs))
      _x = self.pplr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I6d3I().pack(_x.pplr.timestamp, _x.pplr.Setpoint, _x.pplr.Input, _x.pplr.Output, _x.pplr.Kd, _x.pplr.Ki, _x.pplr.Kp, _x.ppud.header.seq, _x.ppud.header.stamp.secs, _x.ppud.header.stamp.nsecs))
      _x = self.ppud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I6d3fIH3I().pack(_x.ppud.timestamp, _x.ppud.Setpoint, _x.ppud.Input, _x.ppud.Output, _x.ppud.Kd, _x.ppud.Ki, _x.ppud.Kp, _x.yaw, _x.pitch, _x.roll, _x.timestamp, _x.tune_type, _x.profiled_loop.header.seq, _x.profiled_loop.header.stamp.secs, _x.profiled_loop.header.stamp.nsecs))
      _x = self.profiled_loop.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH2f4I().pack(_x.profiled_loop.timestamp, _x.profiled_loop.averageIterationCount, _x.profiled_loop.averageTime, _x.profiled_loop.averageTime2, _x.profiled_loop.averageTick, _x.profiled_mpu.header.seq, _x.profiled_mpu.header.stamp.secs, _x.profiled_mpu.header.stamp.nsecs))
      _x = self.profiled_mpu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH2f4I().pack(_x.profiled_mpu.timestamp, _x.profiled_mpu.averageIterationCount, _x.profiled_mpu.averageTime, _x.profiled_mpu.averageTime2, _x.profiled_mpu.averageTick, _x.profiled_wifi.header.seq, _x.profiled_wifi.header.stamp.secs, _x.profiled_wifi.header.stamp.nsecs))
      _x = self.profiled_wifi.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH2f4I().pack(_x.profiled_wifi.timestamp, _x.profiled_wifi.averageIterationCount, _x.profiled_wifi.averageTime, _x.profiled_wifi.averageTime2, _x.profiled_wifi.averageTick, _x.profiled_steer.header.seq, _x.profiled_steer.header.stamp.secs, _x.profiled_steer.header.stamp.nsecs))
      _x = self.profiled_steer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH2fI().pack(_x.profiled_steer.timestamp, _x.profiled_steer.averageIterationCount, _x.profiled_steer.averageTime, _x.profiled_steer.averageTime2, _x.profiled_steer.averageTick))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mpuRAW is None:
        self.mpuRAW = atom_esp_listener.msg.mpudata()
      if self.ppfb is None:
        self.ppfb = atom_esp_listener.msg.PID_Tune_Params()
      if self.pplr is None:
        self.pplr = atom_esp_listener.msg.PID_Tune_Params()
      if self.ppud is None:
        self.ppud = atom_esp_listener.msg.PID_Tune_Params()
      if self.profiled_loop is None:
        self.profiled_loop = atom_esp_listener.msg.Profiler_data()
      if self.profiled_mpu is None:
        self.profiled_mpu = atom_esp_listener.msg.Profiler_data()
      if self.profiled_wifi is None:
        self.profiled_wifi = atom_esp_listener.msg.Profiler_data()
      if self.profiled_steer is None:
        self.profiled_steer = atom_esp_listener.msg.Profiler_data()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.mpuRAW.header.seq, _x.mpuRAW.header.stamp.secs, _x.mpuRAW.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mpuRAW.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.mpuRAW.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.mpuRAW.timestamp, _x.mpuRAW.AcX, _x.mpuRAW.AcY, _x.mpuRAW.AcZ, _x.mpuRAW.Tmp, _x.mpuRAW.GyX, _x.mpuRAW.GyY, _x.mpuRAW.GyZ, _x.pingheight, _x.ppfb.header.seq, _x.ppfb.header.stamp.secs, _x.ppfb.header.stamp.nsecs,) = _get_struct_I7hf3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ppfb.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ppfb.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.ppfb.timestamp, _x.ppfb.Setpoint, _x.ppfb.Input, _x.ppfb.Output, _x.ppfb.Kd, _x.ppfb.Ki, _x.ppfb.Kp, _x.pplr.header.seq, _x.pplr.header.stamp.secs, _x.pplr.header.stamp.nsecs,) = _get_struct_I6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pplr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pplr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.pplr.timestamp, _x.pplr.Setpoint, _x.pplr.Input, _x.pplr.Output, _x.pplr.Kd, _x.pplr.Ki, _x.pplr.Kp, _x.ppud.header.seq, _x.ppud.header.stamp.secs, _x.ppud.header.stamp.nsecs,) = _get_struct_I6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ppud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ppud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.ppud.timestamp, _x.ppud.Setpoint, _x.ppud.Input, _x.ppud.Output, _x.ppud.Kd, _x.ppud.Ki, _x.ppud.Kp, _x.yaw, _x.pitch, _x.roll, _x.timestamp, _x.tune_type, _x.profiled_loop.header.seq, _x.profiled_loop.header.stamp.secs, _x.profiled_loop.header.stamp.nsecs,) = _get_struct_I6d3fIH3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profiled_loop.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.profiled_loop.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.profiled_loop.timestamp, _x.profiled_loop.averageIterationCount, _x.profiled_loop.averageTime, _x.profiled_loop.averageTime2, _x.profiled_loop.averageTick, _x.profiled_mpu.header.seq, _x.profiled_mpu.header.stamp.secs, _x.profiled_mpu.header.stamp.nsecs,) = _get_struct_IH2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profiled_mpu.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.profiled_mpu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.profiled_mpu.timestamp, _x.profiled_mpu.averageIterationCount, _x.profiled_mpu.averageTime, _x.profiled_mpu.averageTime2, _x.profiled_mpu.averageTick, _x.profiled_wifi.header.seq, _x.profiled_wifi.header.stamp.secs, _x.profiled_wifi.header.stamp.nsecs,) = _get_struct_IH2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profiled_wifi.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.profiled_wifi.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.profiled_wifi.timestamp, _x.profiled_wifi.averageIterationCount, _x.profiled_wifi.averageTime, _x.profiled_wifi.averageTime2, _x.profiled_wifi.averageTick, _x.profiled_steer.header.seq, _x.profiled_steer.header.stamp.secs, _x.profiled_steer.header.stamp.nsecs,) = _get_struct_IH2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profiled_steer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.profiled_steer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.profiled_steer.timestamp, _x.profiled_steer.averageIterationCount, _x.profiled_steer.averageTime, _x.profiled_steer.averageTime2, _x.profiled_steer.averageTick,) = _get_struct_IH2fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.mpuRAW.header.seq, _x.mpuRAW.header.stamp.secs, _x.mpuRAW.header.stamp.nsecs))
      _x = self.mpuRAW.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I7hf3I().pack(_x.mpuRAW.timestamp, _x.mpuRAW.AcX, _x.mpuRAW.AcY, _x.mpuRAW.AcZ, _x.mpuRAW.Tmp, _x.mpuRAW.GyX, _x.mpuRAW.GyY, _x.mpuRAW.GyZ, _x.pingheight, _x.ppfb.header.seq, _x.ppfb.header.stamp.secs, _x.ppfb.header.stamp.nsecs))
      _x = self.ppfb.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I6d3I().pack(_x.ppfb.timestamp, _x.ppfb.Setpoint, _x.ppfb.Input, _x.ppfb.Output, _x.ppfb.Kd, _x.ppfb.Ki, _x.ppfb.Kp, _x.pplr.header.seq, _x.pplr.header.stamp.secs, _x.pplr.header.stamp.nsecs))
      _x = self.pplr.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I6d3I().pack(_x.pplr.timestamp, _x.pplr.Setpoint, _x.pplr.Input, _x.pplr.Output, _x.pplr.Kd, _x.pplr.Ki, _x.pplr.Kp, _x.ppud.header.seq, _x.ppud.header.stamp.secs, _x.ppud.header.stamp.nsecs))
      _x = self.ppud.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I6d3fIH3I().pack(_x.ppud.timestamp, _x.ppud.Setpoint, _x.ppud.Input, _x.ppud.Output, _x.ppud.Kd, _x.ppud.Ki, _x.ppud.Kp, _x.yaw, _x.pitch, _x.roll, _x.timestamp, _x.tune_type, _x.profiled_loop.header.seq, _x.profiled_loop.header.stamp.secs, _x.profiled_loop.header.stamp.nsecs))
      _x = self.profiled_loop.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH2f4I().pack(_x.profiled_loop.timestamp, _x.profiled_loop.averageIterationCount, _x.profiled_loop.averageTime, _x.profiled_loop.averageTime2, _x.profiled_loop.averageTick, _x.profiled_mpu.header.seq, _x.profiled_mpu.header.stamp.secs, _x.profiled_mpu.header.stamp.nsecs))
      _x = self.profiled_mpu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH2f4I().pack(_x.profiled_mpu.timestamp, _x.profiled_mpu.averageIterationCount, _x.profiled_mpu.averageTime, _x.profiled_mpu.averageTime2, _x.profiled_mpu.averageTick, _x.profiled_wifi.header.seq, _x.profiled_wifi.header.stamp.secs, _x.profiled_wifi.header.stamp.nsecs))
      _x = self.profiled_wifi.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH2f4I().pack(_x.profiled_wifi.timestamp, _x.profiled_wifi.averageIterationCount, _x.profiled_wifi.averageTime, _x.profiled_wifi.averageTime2, _x.profiled_wifi.averageTick, _x.profiled_steer.header.seq, _x.profiled_steer.header.stamp.secs, _x.profiled_steer.header.stamp.nsecs))
      _x = self.profiled_steer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_IH2fI().pack(_x.profiled_steer.timestamp, _x.profiled_steer.averageIterationCount, _x.profiled_steer.averageTime, _x.profiled_steer.averageTime2, _x.profiled_steer.averageTick))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mpuRAW is None:
        self.mpuRAW = atom_esp_listener.msg.mpudata()
      if self.ppfb is None:
        self.ppfb = atom_esp_listener.msg.PID_Tune_Params()
      if self.pplr is None:
        self.pplr = atom_esp_listener.msg.PID_Tune_Params()
      if self.ppud is None:
        self.ppud = atom_esp_listener.msg.PID_Tune_Params()
      if self.profiled_loop is None:
        self.profiled_loop = atom_esp_listener.msg.Profiler_data()
      if self.profiled_mpu is None:
        self.profiled_mpu = atom_esp_listener.msg.Profiler_data()
      if self.profiled_wifi is None:
        self.profiled_wifi = atom_esp_listener.msg.Profiler_data()
      if self.profiled_steer is None:
        self.profiled_steer = atom_esp_listener.msg.Profiler_data()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.mpuRAW.header.seq, _x.mpuRAW.header.stamp.secs, _x.mpuRAW.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mpuRAW.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.mpuRAW.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.mpuRAW.timestamp, _x.mpuRAW.AcX, _x.mpuRAW.AcY, _x.mpuRAW.AcZ, _x.mpuRAW.Tmp, _x.mpuRAW.GyX, _x.mpuRAW.GyY, _x.mpuRAW.GyZ, _x.pingheight, _x.ppfb.header.seq, _x.ppfb.header.stamp.secs, _x.ppfb.header.stamp.nsecs,) = _get_struct_I7hf3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ppfb.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ppfb.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.ppfb.timestamp, _x.ppfb.Setpoint, _x.ppfb.Input, _x.ppfb.Output, _x.ppfb.Kd, _x.ppfb.Ki, _x.ppfb.Kp, _x.pplr.header.seq, _x.pplr.header.stamp.secs, _x.pplr.header.stamp.nsecs,) = _get_struct_I6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pplr.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.pplr.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.pplr.timestamp, _x.pplr.Setpoint, _x.pplr.Input, _x.pplr.Output, _x.pplr.Kd, _x.pplr.Ki, _x.pplr.Kp, _x.ppud.header.seq, _x.ppud.header.stamp.secs, _x.ppud.header.stamp.nsecs,) = _get_struct_I6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ppud.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ppud.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.ppud.timestamp, _x.ppud.Setpoint, _x.ppud.Input, _x.ppud.Output, _x.ppud.Kd, _x.ppud.Ki, _x.ppud.Kp, _x.yaw, _x.pitch, _x.roll, _x.timestamp, _x.tune_type, _x.profiled_loop.header.seq, _x.profiled_loop.header.stamp.secs, _x.profiled_loop.header.stamp.nsecs,) = _get_struct_I6d3fIH3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profiled_loop.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.profiled_loop.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.profiled_loop.timestamp, _x.profiled_loop.averageIterationCount, _x.profiled_loop.averageTime, _x.profiled_loop.averageTime2, _x.profiled_loop.averageTick, _x.profiled_mpu.header.seq, _x.profiled_mpu.header.stamp.secs, _x.profiled_mpu.header.stamp.nsecs,) = _get_struct_IH2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profiled_mpu.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.profiled_mpu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.profiled_mpu.timestamp, _x.profiled_mpu.averageIterationCount, _x.profiled_mpu.averageTime, _x.profiled_mpu.averageTime2, _x.profiled_mpu.averageTick, _x.profiled_wifi.header.seq, _x.profiled_wifi.header.stamp.secs, _x.profiled_wifi.header.stamp.nsecs,) = _get_struct_IH2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profiled_wifi.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.profiled_wifi.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.profiled_wifi.timestamp, _x.profiled_wifi.averageIterationCount, _x.profiled_wifi.averageTime, _x.profiled_wifi.averageTime2, _x.profiled_wifi.averageTick, _x.profiled_steer.header.seq, _x.profiled_steer.header.stamp.secs, _x.profiled_steer.header.stamp.nsecs,) = _get_struct_IH2f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.profiled_steer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.profiled_steer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.profiled_steer.timestamp, _x.profiled_steer.averageIterationCount, _x.profiled_steer.averageTime, _x.profiled_steer.averageTime2, _x.profiled_steer.averageTick,) = _get_struct_IH2fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I6d3I = None
def _get_struct_I6d3I():
    global _struct_I6d3I
    if _struct_I6d3I is None:
        _struct_I6d3I = struct.Struct("<I6d3I")
    return _struct_I6d3I
_struct_I6d3fIH3I = None
def _get_struct_I6d3fIH3I():
    global _struct_I6d3fIH3I
    if _struct_I6d3fIH3I is None:
        _struct_I6d3fIH3I = struct.Struct("<I6d3fIH3I")
    return _struct_I6d3fIH3I
_struct_IH2f4I = None
def _get_struct_IH2f4I():
    global _struct_IH2f4I
    if _struct_IH2f4I is None:
        _struct_IH2f4I = struct.Struct("<IH2f4I")
    return _struct_IH2f4I
_struct_I7hf3I = None
def _get_struct_I7hf3I():
    global _struct_I7hf3I
    if _struct_I7hf3I is None:
        _struct_I7hf3I = struct.Struct("<I7hf3I")
    return _struct_I7hf3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_IH2fI = None
def _get_struct_IH2fI():
    global _struct_IH2fI
    if _struct_IH2fI is None:
        _struct_IH2fI = struct.Struct("<IH2fI")
    return _struct_IH2fI
